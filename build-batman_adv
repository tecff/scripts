#!/bin/bash

PACKAGE="batman-adv"
REMOTE="git://git.open-mesh.org/batman-adv.git"
TAG="v2019.0"
KMOD_VERSION="2019.0"
PKG_RELEASE="1"
BUILD_ROOT="/usr/src/batman-adv"
MAINTAINER="rotanid"
PKGLICENSE="GPL2"
PKGGROUP="net"
PKGALTSRC="https://git.open-mesh.org/batman-adv.git"
PKGDESC="B.A.T.M.A.N. advanced external module"

RUNNING_KERNEL_REL=$(uname -r)


if [[ "$RUNNING_KERNEL_REL" = "4.19.0-0.bpo"* ]]; then
	# stretch-backports
	REQUIRED_KERNEL=$(dpkg -l | grep "linux-image.*bpo" | grep -v meta | tail -1 | awk '{ print $2 }')
	TARGET_KERNEL=$(echo $REQUIRED_KERNEL | sed "s/linux-image-//")
elif [[ "$RUNNING_KERNEL_REL" = "4.9.0-0.bpo"* ]]; then
	# jessie-backports
	REQUIRED_KERNEL=$(dpkg -s linux-image-4.9-amd64 | grep "^Depends" | sed 's/Depends:\s*//')
	TARGET_KERNEL=$(echo $REQUIRED_KERNEL | sed 's/linux-image-//')
elif [[ "$RUNNING_KERNEL_REL" = "4.9.0"* ]]; then
	# stretch
	REQUIRED_KERNEL=$(dpkg -s linux-image-amd64 | grep "^Depends" | sed 's/Depends:\s*//')
	TARGET_KERNEL=$(echo $REQUIRED_KERNEL | sed 's/linux-image-//')
elif [[ "$RUNNING_KERNEL_REL" = "3.16.0"* ]]; then
	# jessie
	REQUIRED_KERNEL=$(dpkg -s linux-image-amd64 | grep "^Depends" | sed 's/Depends:\s*//')
	TARGET_KERNEL=$(echo $REQUIRED_KERNEL | sed 's/linux-image-//')
else
	echo "the currently running kernel version ( $RUNNING_KERNEL_REL ) is not supported yet by this build script."
	exit 1
fi
REQUIRES="${REQUIRED_KERNEL}"


check() {
	REQUIRED=0

	# check kernel version in vermagic
	local KMOD_VERMAGIC=$(/sbin/modinfo -k $TARGET_KERNEL batman-adv --field vermagic | awk '{ print $1 }')
	if [[ $KMOD_VERMAGIC != $TARGET_KERNEL ]]; then
		echo "[-] Kernel version changed (${KMOD_VERMAGIC} to ${TARGET_KERNEL})."
		REQUIRED=1
	fi

	# check kmod version
	local KMOD_CURRENT=$(/sbin/modinfo -k $TARGET_KERNEL batman-adv --field version)

	/usr/bin/dpkg --compare-versions "$KMOD_CURRENT" "eq" "$KMOD_VERSION"
	local CODE=$?
	if [ $CODE -ne 0 ]; then
		echo "[-] batman-adv version changed (${KMOD_CURRENT} to ${KMOD_VERSION})."
		REQUIRED=1
	fi

	exit $REQUIRED
}

prepare() {
	rm -rf $BUILD_ROOT
	git clone "$REMOTE" "$BUILD_ROOT"
	cd $BUILD_ROOT
	git checkout "$TAG"

	# apply patches if they exist
	if [ "$(ls -A /usr/src/${PACKAGE}_patches/)" ]; then
		git am /usr/src/${PACKAGE}_patches/*
	fi
}

build() {
	cd $BUILD_ROOT
	export KERNELPATH=/lib/modules/$TARGET_KERNEL/build
	make CONFIG_BATMAN_ADV_DEBUG=y CONFIG_BATMAN_ADV_DEBUGFS=y CONFIG_BATMAN_ADV_MCAST=y -j$(nproc)
}

install() {
	cd $BUILD_ROOT
	echo ${PKGDESC} > description-pak
	checkinstall -y --nodoc \
		--pkgname "${PACKAGE}" \
		--pkgversion "${KMOD_VERSION}" \
		--pkgrelease "${PKG_RELEASE}" \
		--pkgsource "${REMOTE}" \
		--pkgaltsource "${PKGALTSRC}" \
		--pkglicense "${PKGLICENSE}" \
		--pkggroup "${PKGGROUP}" \
		--maintainer "${MAINTAINER}" \
		--requires "${REQUIRES}" \
		--fstrans=no
	depmod -a
}

if [ "$1" = "check" ]; then
	check
else
	prepare
	build
	if [ "$?" != "0" ]; then
		echo "build may have failed."
		exit 1
	fi
	install
fi
