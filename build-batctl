#!/bin/bash

PACKAGE="batctl"
REMOTE="git://git.open-mesh.org/batctl.git"
TAG="v2019.3"
TARGET_VERSION="2019.3"
PKG_RELEASE_PREFIX="0~tecff"
PKG_RELEASE="1"
MAINTAINER="rotanid"
PKGLICENSE="GPL2"
PKGGROUP="net"
PKGALTSRC="https://git.open-mesh.org/batctl.git"
PKGDESC="B.A.T.M.A.N. advanced control and management tool"

REQUIRES="libc6 \(\>= 2.15\),libnl-genl-3-200 \(\>= 3.2.7\)"

BUILD_ROOT="/tmp/batctl-source"
INSTALL_PREFIX="/usr"

RUNNING_DISTRO="$(lsb_release -s -i)"
RUNNING_DISTRO_VERSION="$(lsb_release -r -s)"
if [[ "$RUNNING_DISTRO_VERSION" = "16.04"* ]]; then
	# Ubuntu Xenial
	PKG_RELEASE="${PKG_RELEASE_PREFIX}~ubuntu0.16.04u${PKG_RELEASE}"
elif [[ "$RUNNING_DISTRO_VERSION" = "18.04"* ]]; then
	# Ubuntu Bionic
	PKG_RELEASE="${PKG_RELEASE_PREFIX}~ubuntu0.18.04u${PKG_RELEASE}"
elif [[ "$RUNNING_DISTRO_VERSION" = "8"* ]]; then
	# Debian Jessie
	PKG_RELEASE="${PKG_RELEASE_PREFIX}~deb8u${PKG_RELEASE}"
elif [[ "$RUNNING_DISTRO_VERSION" = "9"* ]]; then
	# Debian Stretch
	PKG_RELEASE="${PKG_RELEASE_PREFIX}~deb9u${PKG_RELEASE}"
elif [[ "$RUNNING_DISTRO_VERSION" = "10"* ]]; then
	# Debian Buster
	PKG_RELEASE="${PKG_RELEASE_PREFIX}~deb10u${PKG_RELEASE}"
else
	echo "the currently running $RUNNING_DISTRO version ( $RUNNING_DISTRO_VERSION ) of your distro is not supported yet by this build script."
	exit 1
fi

check() {
	REQUIRED=0

	local CURRENT_VERSION=$(batctl -v | awk '{ print $2 }')
	/usr/bin/dpkg --compare-versions "$CURRENT_VERSION" "eq" "$TARGET_VERSION"
	local CODE=$?
	if [ $CODE -ne 0 ]; then
		echo "[-] batctl version changed (${CURRENT_VERSION} to ${TARGET_VERSION})."
		REQUIRED=1
	fi

	exit $REQUIRED
}

prepare() {
	rm -rf $BUILD_ROOT
	git clone "$REMOTE" "$BUILD_ROOT"
	cd $BUILD_ROOT
	git checkout "$TAG"
	
	# apply patches if they exist
	if [ "$(ls -A /usr/src/${PACKAGE}_patches/)" ]; then
		git am /usr/src/${PACKAGE}_patches/*
	fi
}

build() {
	cd $BUILD_ROOT
	make -j$(nproc)
}

install() {
	cd $BUILD_ROOT
	echo ${PKGDESC} > description-pak
	fakeroot checkinstall -y --nodoc \
		--pkgname "${PACKAGE}" \
		--pkgversion "${TARGET_VERSION}" \
		--pkgrelease "${PKG_RELEASE}" \
		--pkgsource "${REMOTE}" \
		--pkgaltsource "${PKGALTSRC}" \
		--pkglicense "${PKGLICENSE}" \
		--pkggroup "${PKGGROUP}" \
		--maintainer "${MAINTAINER}" \
		--requires "${REQUIRES}" \
		--fstrans=yes \
		--install=no \
	make install PREFIX="${INSTALL_PREFIX}"
}

if [ "$1" = "check" ]; then
	check
else
	prepare
	build
	install
fi
